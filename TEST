


rm( list=ls())  
# Environment 객체 삭제 

cat("\f")        
 # console clear  

cat("\014")    # console clear  cat("\f")

==================================

<응용SW  엔지니어링> 

요구사항 확인
데이터 입출력 구현
통합 구현
제품소프트웨어 패키징

서버프로그램 구현
인터페이스 구현

프로그래밍 언어 활용
응용 SW 기초 기술 활용

화면 설계
애플리케이션 테스트 관리

==================================

<DB엔지니어링>

SQL 응용

=================================

<보안엔지니어링>

소프트웨어 개발 보안 구축

==================================
 
소프트웨어 공학
소프트웨어 개발 프로세스

***소프트웨어 생명 주기
소프트웨어 생명 주기 
소프트웨어를 개발하기 위해 정의하고 운용, 유지보수 등의 과정을 각 단계별로 나눈것

폭포수 모형(Waterfall Model)
프로토 타입 모형(Prototype Model, 원형 모형) / 
나선형 모형(Spiral Model, 점진적 모형)

애자일 모형(Agile Model) 
• 애자일 모형 기반으로 하는 소프트웨어 개발 모형 /
- 스크럼(Scrum)
- XP(eXtreme Programming),
- 칸반(Kanban)
- Lean, 크리스탈
- ASD 등

***현행 시스템 파악 절차 

• 1단계 : 시스템 구성 파악, 시스템 기능 파악, 시스템 인터페이스 파악

단위 업무 정보시스템들의 명칭, 주요 기능 들 명시
주요 기능과 하부 기능, 세부 기능으로 구분하여 계층형으로 표시
데이터를 어떤 형식으로 주고받는지, 
통신규약은 무엇을 사용하는지, 
연계 유형은 무엇인지 등을 반드시 고려

• 2단계 : 아키텍처 구성 파악, 소프트웨어 구성 파악

아키텍처 구성 파악
기간 업무 수행에 어떠한 기술 요소들이 사용되는지 
최상위 수준에서 계층별로 표현한 아키텍처 구성도로 작성

소프트웨어 구성 파악
단위 업무 시스템별로 업무 처리를 위해 설치되어 있는 
소프트웨어들의 제품명, 용도, 라이선스 적용 방식, 라이선스 수 등을 명시

• 3단계 : 하드웨어 구성 파악, 네트워크 구성 파악

하드웨어 구성 파악
단위 업무 시스템들이 운용되는 서버의 주요 사양과 수량, 그리고 이중화의 적용 여부 명시
* 서버의 주요 사양 : 서버의 CPU 처리 속도, 메모리 크기, 하드디스크의 용량 등을 파악
* 서버의 이중화 : 운용 서버의 장애 시 대기 서버로 서비스를 계속 유지할 수 있도록, 
운용 서버의 자료 변경이 예비 서버에도 동일하게 복제되도록 관리

네트워크 구성 파악
업무 시스템들의 네트워크 구성을 파악할 수 있도록 
서버의 위치, 서버 간의 네트워크 연결 방식을 네트워크 구성도로 작성
네트워크 구성도를 통해 서버들의 물리적인 위치 관계를 파악, 보안 취약성 분석


***개발 기술 환경 파악

운영체제(OS, Operating System)
컴퓨터 시스템의 자원들을 효율적으로 관리하며, 사용자가 컴퓨터를 편리하고 
효율적으로 사용할 수 있도록 환경을 제공하는 소프트웨어

데이터베이스 관리 시스템(DBMS)
사용자와 데이터베이스 사이에서 사용자의 요구에 따라 정보를 생성해주고, 
데이터베이스를 관리해 주는 소프트웨어
- DBMS는 기존의 파일 시스템이 갖는 데이터 종속성과 
중복성의 문제를 해결하기 위해 제안된 시스템

웹 애플리케이션 서버(WAS; Web Application Sever) 
정적인 콘텐츠 처리를 하는 웹 서버와 달리 
사용자의 요구에 따라 변하는 동적인 콘텐츠를 처리하기 위해 사용되는 미들웨어
- WAS의 종류에는 Tomcat, GlassFish, JBoss, Jetty, JEUS,
 Resin, WebLogic, WebSphere 등이 있음


*** 요구사항 정의
기능 요구사항
(Functional requirements)
비기능 요구사항
(Non-functional requirements)

***요구사항 개발 프로세스 
1. 요구사항 도출(Requirement Elicitation, 요구사항 수집)
- 요구사항을 도출하는 주요 기법 : 인터뷰, 설문, 브레인스토밍, 프로토타이핑, 유스케이스 
2. 요구사항 분석(Requirement Analysis)
- 사용자 요구사항의 타당성을 조사하고 비용과 일정에 대한 제약을 설정
3. 요구사항 명세(Requirement Specification, 요구사항 문서화)
요구사항을 체계적으로 분석한 후 승인될 수 있도록 문서화하는 것
4. 요구사항 확인(Requirement Validation, 요구사항 검증)
- 일반적으로 요구사항 관리 도구를 이용하여 정의 문서들에 대해 형상 관리를 수행

***요구사항 분석 기법
1. 요구사항 분류(Requirement Classification)
2. 개념 모델링(Conceptual Modeling)
 상황을 단순화하여 개념적으로 표현한 것을 모델이라고 하며, 
이러한 모델을 만드는 과정을 모델링이라고 함
3. 요구사항 할당(Requirement Allocation)
요구사항을 만족시키기 위한 구성 요소를 식별하는 것
4. 요구사항 협상(Requirement Negotiation)
5. 정형 분석(Formal Analysis)
구문과 의미를 갖는 정형화된 언어를 이용해 요구사항을
 수학적 기호로 표현한 후 이를 분석하는 과정

***요구사항 확인 기법
요구사항 확인 기법
요구사항 개발 과정을 거쳐 문서화된 요구사항 관련 내용을 확인하고 검증하는 방법
- 요구사항에 자원이 배정되기 전에 문제 파악을 위한 검증 수행
- 요구사항 확인 기법 : 요구사항 검토, 프로토타이핑, 모델 검증, 인수 테스트 등


***** 
유스케이스는 시스템을 블랙박스로 보고 고객의 요구사항을 분석한 것이다.

 앞에서 수행한 유스케이스 모델링의 결과를 바탕으로 시스템을
열어(시스템을 화이트박스로 보고) 
시스템 내부의 모습을 분석하는 과정을 조사

 우선 유스케이스 시나리오를 통해 행위자와 시스템이 주고받는
정보들을 활용하여
 시스템 내부에 저장되고 관리되어야 하는 정보를 밝히는 정보 모델링을 수행하고

 그 결과를 클래스 다이어그램으로 나타낸다.

 다음은 유스케이스 시나리오를 확장하여 
시퀀스 다이어그램 작성

 업무 프로세스 내의 상호 작용에 대한 추가적인 이해가 필요할
경우 활동 다이어그램을 작성할 수 있다. 



***UML(Unified Modeling Language)
시스템을 모델로 표현해주는 대표적인 모델링 언어
수학적인 문법과 구성으로 이뤄진 프로그래밍 언어 
 UML은 모델링 언어이다.  다시말해 설계도를 그리기 위한 언어라는것
개발 기획과 산출물에 대한 증거. 

관계(Relationships)
사물과 사물 사이의 연관성을 표현하는 것
- 연관 관계 : 2개 이상의 사물이 서로 관련되어 있음을 표현
- 집합관계 : 하나의 사물이 다른 사물에 포함되어 있는 관계
- 포함 관계 : 집합 관계의 특수 형태
- 일반화 관계 : 하나의 사물이 다른 사물에 비해 더 일반적인지 구체적인지 표현
- 의존 관계 : 사물 사이에 서로 연관은 있으나 필요에 의해 서로에게 영향을 주는 짧은 시간 동안만 연관을 유지하는 관계
- 실체화 관계 : 사물이 할 수 있거나 해야 하는 기능으로 서로를 그룹화 할 수 있는 관계

UML 다이어그램
1.구조 다이어그램(Structure Diagram)
클래스 다이어그램, 객체 다이어그램, 복합체 구조 다이어그램, 배치 다이어그램, 
컴포넌트 다이어그램, 패키지 다이어그램

2. 행위 다이어그램(Behavior Diagram)
활동 다이어그램, 상태 머신 다이어그램, 유즈 케이스 다이어그램, 시퀀스 다이어그램



*** UI 요구사항 확인
새로 개발할 시스템에 적용할 UI 관련 요구사항을 조사해서 작성하는 단계
- 요구사항의 순서 : 목표 정의 → 활동 사항 정의 → UI 요구사항 작성

*** UI 설계서 작성

사용자의 요구사항을 바탕으로 UI 설계를 구체화해 작성하는 문서
- 기획자, 개발자, 디자이너 등과의 원활한 의사소통을 위해 작성
- UI 설계서 작성 순서 : UI 설계서 표지, UI 설계서 개정 이력, UI 요구사항 정의서, 
시스템 구조, 사이트 맵, 프로세스 정의서, 화면 설계 순

***  UI 상세 설계

UI 시나리오 문서
UI 상세 설계는 UI 설계서를 바탕으로 실제 설계 및 구현을 위해 
모든 화면에 대한 자세한 설계를 진행 , 시나리오를 작성해야 함
- UI 시나리오 문서 : UI의 기능 구조, 대표 화면, 화면 간 인터렉션의 흐름,
 다양한 상황에서의 예외 처리 등을 문서로 정리한 것


*** UI 설계 도구

사용자의 요구사항에 맞게 UI의 화면 구조나 화면 배치 등을 설계할 때 사용하는 도구
- UI 설계 도구의 종류 : 와이어프레임, 목업, 스토리보드, 프로토타입, 유스케이스 등

Ex). 프로토타입(Prototype)
와이어프레임이나 스토리보드 등에 인터랙션을 적용함으로써 
실제 구현된 것처럼 테스트가 가능한 동적인 형태의 모형
* 인터렉션 : UI를 통해 시스템을 사용하는 일련의 상호 작용

- 프로토타입 툴 : HTML/CSS, Axure, Flinto, 네이버 프로토나우, 카카오 오븐 등



***소프트웨어 아키텍처
소프트웨어 아키텍처 : 
소프트웨어의 골격이 되는 기본 구조,
 소프트웨어를 구성하는 요소들 간의 관계를 표현하는 시스템의 구조
- 기본 원리 : 모듈화, 추상화, 단계적 분해, 정보은닉

***아키텍처 패턴
아키텍처를 설계할 때 참조할 수 있는 전형적인 해결 방식, 예제
- 아키텍처 패턴의 장점 : 시행착오 출임, 예측 가능, 안정적 개발
- 아키텍처 패턴의 종류 : 
레이어 패턴, 클라이언트-서버 패턴, 파이프-필터 패턴, 모델-뷰-컨트롤러 패턴


ex 계층 아키텍쳐  
3계층 아키텍쳐  (데이터 접근 , 비즈니스 로직  , 프레젠테이션) 
3-tier 


***객체지향 설계

 객체 / 클래스 / 캡슐화 / 추상화 / 다형성 / 상속성 

모듈화  (결합도 / 응집도) 

응집도:- 모듈의 독립성을 나타내는 개념으로 하나의 모듈 내부 처리 요소들간에 
기능적 연관도를 측정하는 척도
결합도; - 소프트웨어 구조에서 모듈간 연관성을 측정하는 척도

팬인(Fan-In) / 팬아웃(Fan-Out)
- 팬인 : 자신을 사용하는 모듈의 수
- 팬아웃 : 자신이 호출하는 모듈의 수
- 팬인과 팬아웃을 분석해 시스템의 복잡도를 알 수 있음

- 팬인이 높다 = 재사용 측면에서 설계가 잘되었으나, 
단일 장애점이 발생할 수 있으므로 중점적인 관리 및 테스트가 필요하다
- 팬아웃이 높다 = 불필요한 호출을 하고 있는지 검토하고, 
단순화 시킬 수 있는지 여부에 대한 검토가 필요하다
- 시스템의 복잡도를 최적화하기 위해선 팬인은 높게, 팬아웃은  낮게 설계해야 함

***. 공통 모듈
여러 프로그램에서 공통적으로 사용할 수 있는 모듈
- 자주 사용되는 계산식, 매번 필요한 사용자 인증과 같은 기능들이 공통 모듈로 구성될 수 있음

재사용(Reuse)
비용과 개발 시간을 절약하기 위해 이미 개발된 기능들을 파악하고 재구성하여 새로운 시스템 또는 기능 개발에 사용하기 적합하도록 최적화 시키는 작업
- 재사용되는 대상은 외부 모듈과의 결합도는 낮고 응집도는 높아야 함


***. 디자인패턴

- 소프트웨어 설계에서 얻은 세세한 경험들을 기록해 놓도록 하는 것임

- 재사용 가능한 객체지향 설계를 만들기 위해 유용한 공통의 설계 구조로부터
 중요 요소들을 식별하여 이들에게 적당한 이름을 주고 추상화 한 것

- GoF의 디자인 패턴은 유형에 따라 생성 패턴 5개, 구조 패턴 7개, 행위 패턴 11개 
총 23개의 패턴으로 구성됨 



*** 품질 요구사항 표준지침  

• ISO/IEC 9126 
- 소프트웨어의 품질 특성과 평가를 위한 표준 지침
- ISO/IEC 9126에서 제시한 품질 특성 : 기능성, 신뢰성, 사용성, 효율성, 유지 보수성, 이식성


시스템 프로그래밍 (운영체제)

운영체제(OS; Operating System)

컴퓨터 시스템의 자원들을 효율적으로 관리하며, 사용자가 컴퓨터를 편리하고 효과적으로 사용할 수 있도록 환경을 제공하는 여러 프로그램의 모임
- 사용자와 하드웨어 간의 인터페이스

운영체제의 목적 /
- 처리 능력 향상, 사용 가능도 향샹, 신뢰도 향상, 반환 시간 단축

운영체제의 기능 
- 프로세서(중앙처리장치, Processor), 기억장치(주기억장치, 보조기억장치), 
입출력장치, 파일 및 정보 등의 자원 관리

- 자원을 효율적으로 관리하기 위한 스케줄링 기능 제공
* 스케줄링 : 어떤 자원을 누가, 언제, 어떤 방식으로 사용할지 결정해주는 것
- 편리한 인터페이스 제공
- 시스템의 각종 하드웨어, 네트워크 관리, 제어
- 시스템의 오류 검사, 복구

a.메모리 관리: 
(사용되고 있는 메모리 현황 파악, 메모리 할당 및 메모리 반환)
b.보조기억장치 관리: 
(디스크 공간 관리, 저장공간 할당, 디스크 스케쥴링)
c.입/출력(I/O)시스템: 
d. 파일 관리 : 
파일/디렉토리의 생성과 삭제, 디스크 장치에 대한 파일의 변환, 파일의 백업 지원
보호 시스템 : 프로세스 보호, 파일 보호

▶ 144 기억장치 관리의 개요

기억장치의 관리 전략 

1. 반입(Fetch) 전략 / 중요★
보조기억장치에 보관중인 프로그램이나 데이터를 
언제 주기억장치로 적재할 것인지를 결정하는 전략 

- 요구 반입 : 실행중인 프로그램이 특정 프로그램이나 데이터 등의 참조를
 요구할 때 적재하는 방법
- 예상 반입 : 실행중인 프로그램에 의해 참조될 프로그램이나 데이터를 
미리 예상하여 적재하는 방법

2. 배치(Placement) 전략 / 중요★
 어디에 위치시킬 것인지를 결정하는 전략

- 최초 적합(First Fit) : 프로그램이나 데이터가 들어갈 수 있는 크기의 
빈 영역 중에서 첫 번째 분할 영영에 배치시키는 방법
- 최적 적합(Best Fit) : 단편화를 가장 작게 남기는 분할 영역에 배치시키는 방법
- 최악 적합(Worst Fit) : 단편화를 가장 많이 남기는 분할 영역에 배치시키는 방법

* 단편화 : 데이터를 할당할 경우 생기는 빈 기억 공간

3. 교체(Replacement) 전략 / 중요★

 이미 사용되고 있는 영역 중에서
 어느 영역을 교체하여 사용할 것인지를 결정하는 전략
- FIFO, OPT, LRU, LFU, NUR, SCR 등이 있음


▶ 145 주기억장치 할당 기법

연속 할당 기법

• 단일 할당 기법

- 오버레이(Overlay) 기법 : 주기억장치보다 큰 사용자 프로그램을 실행하기 위한 기법
- 스와핑(Swapping) 기법 : 하나의 프로그램 전체를 주기억장치에 할당하여 사용

• 다중 분할 할당 기법
- 고정 분할 할당 기법(MFT) = 정적 할당 기법
- 가변 분할 할당 기법(MVT) = 동적 할당 기법 : 단편화를 줄이기 위한 것

***분산할당 기법 ((가상기억장치 관리 기법)

가상기억장치
보조기억장치의 일부를 주기억장치처럼 사용하는 것, 
용량이 작은 주기억장치를 마치 큰 용량을 가진 것처럼 사용하는 기법

***페이징 / 세그먼트 /  연속할당 

프레임(Frame) : 물리 메모리를 일정한 크기로 나눈 블록
페이지(Page) : 가상 메모리를 일정한 크기로 나눈 블록

세크멘테이션 기법: 가상메모리를 서로 크기가 다른 논리적 단위인 
세그먼트(Segment)로 분할, 메모리 할당하며 주소 변환을 하게 됩니다. 
(각각의 세그먼트들은 연속적인 공간에 저장되어있습니다)


*** 페이지 교체 알고리즘 

 물리적 메모리에 빈 프레임이 존재하지 않을 수 있다.
메모리에 올라와 있는 페이지 중 하나를 디스크로 쫓아내어 
메모리에 빈 공간을 확보하는 작업이 필요하다.
-> 이것을 페이지 교체(page replacement)라고 한다.

어떠한 프레임에 있는 페이지를 쫓아낼 것인지를 결정하는 알고리즘

FIFO(First-In-First-Out) 알고리즘
물리적 메모리에 가장 먼저 올라온 페이지를 우선적으로 내쫓는다.

LRU(Least Recent Used) 알고리즘
(마지막 참조시점이 가장 오래된 페이지 교체)
시간지역성(temporal locality)의 성질을 고려해 고안된 알고리즘이다.

5. NUR(Not Used Recently)
LRU와 비슷한 알고리즘, 최근에 사용하지 않은 페이지를 교체하는 기법
- 참조비트와 변형 비트의 값에 따라 교체될 페이지의 순서가 결정


▶ 148 프로세스의 개요

 프로세스
시스템에서의 작업 단위 : 프로그램이 실행되는 형태

PCB(Process Control Block, 프로세스 제어 블록) / 
프로세스에 대한 중요 정보를 저장

**프로세스 상태전이도

 스레드(Thread) /
프로세스 내에서의 작업 단위로서 

- 하나의 프로세스에 하나의 스레드 : 단일 스레드
- 하나의 프로세스에 하나 이상의 스레드 : 다중 스레드

▶ 149 스케줄링

스케줄링
프로세스가 생성되어 실행될 때 필요한 시스템의 여러 자원을 
해당 프로세스에게 할당하는 작업


• 비선점(Non-Preemptive) 스케줄링 
-  강제로 빼앗아 사용할 수 없는 스케줄링 기법
- 프로세스 응답 시간 예측 용이, 일괄 처리 방식에 적합
- 비선점 스케줄링의 종류 : FCFS, SJF, 우선순위, HRN, 기한부 등의 알고리즘

• 선점(Preemptive) 스케줄링 
- 강제로 빼앗아 사용할 수 있는 스케줄링 기법
- 선점 스케줄링의 종류 : 
Round Robin, SRT, 선점 우선순위, 다단계 큐(MLQ), 다단계 피드백 큐(MFQ) 등의 알고리즘



======================================


자료 구조 및 알고리즘

> 데이터 삽입 / 삭제 
> 데이터 정렬
> 데이터 탐색 
> 공간 복잡도 / 시간 복잡도

데이터 베이스

데이타 모델링 기법 ,  파일 시스템의 구성  
인덱싱 기법, 해싱 기법, 
개념적구조 ,  논리적 구조와 물리적 구조, 
각 모델  각종 질의어(query language) 처리 및 최적화, 
데이타베이스 설계 기법
동시성 제어(concurrency control), 복구기법(recovery technique)

*** 파일시스템 (데이터베이스 이전 1960년대)
> Only 물리적 접근 (논리적 접근 X)
> 동일한 파일 2개 이상 프로그램 접근X  
> 데이터 비구조적
> 질의어 제공 X 
> 데이터 통합 X

- 역사 
계층 DBMS (트리구조) 
네트워크 DBMS (그래프구조)
관계 DBMS (Table 구조)


-DBMS : DB Design, Optimizing 전략, SQL 효율
  나. SQL 성능튜닝 진행 프로세스
  다. 데이터베이스 튜닝의 3요소

  가. 데이터베이스 성능개선(튜닝) 목표
처리능력 (Throughput)
처리시간
응답시간
로드시간

-ER 모델 (Entity-Relationship Model)
데이터베이스에 대한 요구 사항을 그래픽적으로 표현하는 방법이다. 


**함수 종속성
 중복된 데이터를 줄일 수 있다. , 
데이터베이스 설계 단계에서 각 정보들 간의 함수 종속 관계를 찾는 것은 매우 중요하다.

**정규화
데이터의 중복을 최소화하기 위해 
데이터의 구조를 결정하는 작업을 정규화 (normalization)라고 한다. 


-DBMS 언어
DDL (Data Definition Language)
정의어 ; CREATE/ TABLE 생성 , ALTER/ TABLE 변경  , DROP/ TABLE 삭제
DML (Data Manipulation Language)
조작어 ; SELECT /검색 , UPDATE /수정 , DELETE/ 삭제 , INSER/T 삽입
☞ 데이터 조작어 4가지 유형

INSERT INTO~ VALUES~
SELECT~ FROM~ WHERE~
DELETE~ FROM~ WHERE~
UPDATE~ SET~ WHERE~

DCL (Data Control Language)
제어어 ; COMMIT/(하드디스크 저장) , ROLLBACK/(내용철회) , GRANT/ , REVOKE / 
＊GRANT : 객체에 대한 권한을 부여하는 명령어
＊REVOKE : 객체에 부여된 권한을 취소하는 명령어



@B+ 트리-

B트리와 대조적으로 B+트리는, 
모든 레코드들이 트리의 가장 하위 레벨에 정렬되어있다. 
오직 키들만이 내부 블록에 저장된다.
B+트리에서 중요한 가치는 블록-지향적인 storage context(예: filesystem)에서 
검색을 효율적으로 할 수 있다는 점이다. 바이너리 서치 트리에 비해 B+트리 노드의 
fanout(한 노드의 자식 노드의 수)이 훨씬 높아서 검색에 필요한
 I/O 동작 회수를 줄일 수 있기 때문이다.


@해쉬테이블 

Hash Table은 key-value 쌍에서 key 값 테이블에 저장할 때 Direct Addressing Table과 달리 
함수를 이용해 key값의 계산을 수행한 후 그 결과값을 배열의 인덱스로 사용하여 
저장하는 방식이다.
● 보안(Security) : 데이터의 위변조를 막기 위해 전자서명이나 보안 알고리즘에 사용
● 자료 구조(Data Structure) : 기억 공간에 저장된 정보를 보다 빠르게 검색하기 위해
 절대주소나 상대주소가 아닌 해시 테이블(Hash Table)을 생성하는 방식

@해싱(Hashing) 구현 기법

1.정적 해싱(Static Hashing)
2.동적 해싱(Dynamic Hashing)


** 데이터 베이스 운영 관리 / 
**트랜잭션
한번에 수행되어야 할 데이터베이스의 일련의 Read와 Write연산을 수행하는 단위, 
하나의 논리적 기능을 수행하기 위한 작업의 단위로서 데이터베이스의 일관된 상태를 
또 다른 일관 상태로 변화시키는 것


  가. 트랜잭션(Transaction)의 정의
transaction은 다수의 쿼리문으로 이루어진 논리적 작업 단위를 말한다
논리적 작업 단위가 모두 성공적으로 실행되면 COMMIT을 호출하여 
모든 쿼리문을 한 번에 데이터베이스에 적용한다

    - 한번에 수행되어야 할 데이터베이스의 일련의 Read와 Write연산을 수행하는 단위
    - 하나의 논리적 기능을 수행하기 위한 작업의 단위
      데이터베이스의 일관된 상태를 또 다른 일관된 상태로 변환시킴.

-데이터 베이스 동시성제어  
동시성 제어(Concurrency Control)란?
다중 사용자 환경을 지원하는 데이터베이스 시스템에서 동시에 실행되는 여러 트랜잭션 간의 간섭으로 문제가 발생하지 않도록 트랜잭션의 실행 순서를 제어하는 기법이다.
※ 트랜잭션 : 데이터베이스의 논리적 작업 단위
동시성 제어는 이러한 문제들을 방지하고 데이터의 무결성 및 일관성을 보장하기 때문에 다중사용자 DBMS에서 매우 중요하다.

-DataBase 회복기법
데이터회복(Data Recovery)의 정의 - 데이터베이스 운영 도중 예기치 못한 
장애(Failure)가 발생할 경우 데이터베이스를 장애 발생 이전의 일관성과 무결성을 복원
http://www.jidum.com/jidums/view.do?jidumId=201


  가. 지연 갱신기법(Deferred Update)
  나. 즉시 갱신기법(Immediate Update)
  다. Check Point 회복기법
  라. 그림자페이지(Shadow Paging) 기법

 (네트워크 - OSI 7 계층) Open sysyem Interconnection 7 

1.물리계층 -   전기적 , 기계적 기능
2.데이터링크 - MAC 주소 , 프레임 (Frame) 

3.네트워크 - 라우팅(최적경로) , IP 주소 (계층헤더) ,  패킷(Packet)
Internet protocol (IP)

4.전송 - Port 번호 , 프로토콜 (TCP,UDP) , 세그먼트 (Segment)
Transmission control protocol (TCP)
User Datagram protocol

5.세션 - 응용프로세스 통신관리 
6.표현 - 데이터 부호화 , 압축 , 복호화  (MIME 인코딩 , EBCDIC -> ASC II)
7.응용계층 - 응용서비스 

 컴퓨터와 컴퓨터간의 통신 규약 
데이터의 전송 및 인코딩, 디지탈 데이터통신 기술, 
데이터 링크 제어, 멀티플렉싱, 
패킷 교환, 
망 경로배정 및 혼잡제어, 
근거리망의 종류와 동작원리

이산수학 

선형대수학 

인공지능 

기계학습 - 지도학습 / 비지도학습 

클라우드 컴퓨터 / 빅데이터 

> 클라우드 컴퓨팅 / 빅데이터
데이터의 규칙을 찾는 과정 과 예측? 

1. 데이터 마이닝
mapreduce, 유사 아이템 검색, 빈발 패턴 검색, 링크 분석, 데이터 스트림 마이닝, 
클러스터링, 그래프 마이닝 

2. 인공지능
신경망, 진화연산, 베이지안망의 기본 원리를 학습


임베디드 시스템

임베디드 시스템

메모리 시스템, 입출력 /  버스 구조
실시간 OS, 디바이스 드라이버 
시스템의 성능평가 / 성능 최적화 기법
내장 소프트웨어 검증 기법

오토마타

오토마타

추상적인 연산 장치(오토마톤)가 계산할 수 있는 것과 그렇지 않은 것에 대한 이론이다

형식 언어(formal language)
특정한 법칙들에 따라 적절하게 구성된 문자열들의 집합
문자열을 입력받아서  언어에 포함된 문자열인지 판단하는 인식기 역할

오토마타 이론은 특정 언어를 인식하는 인식기계를 설계하고 만드는 것

유한 오토마타는 문자열을 입력으로 받아, 
자신이 인식하는 정규 언어에 포함되는지를 판별한다. 
특정 문자열을 입력했을때 유한 오토마타가 이를 받아들인다면(accepted), 
그 문자열은 해당 오토마톤이 인식하는 정규 언어의 단어인 것이다.

첫째, 결정적 유한 오토마타(DFA, Deterministic Finite Automata). 
둘째, 비결정적 유한 오토마타(NFA, Non-deterministic Finite Automata). 
셋째, ε-전이가 있는 비결정적 유한 오토마타
(ε-NFA, Non-deterministic Finite Automata with ε-transitions).

컴파일러 설계 


컴퓨터 구조 

1. 명령어집합, 중앙처리장치, 파이프라이닝, 메모리 계층구조, 입출력장치
2. 프로세스 관리, 메모리 관리, 파일 시스템과 입출력, 네트워크 프로그래밍, 
병렬 프로그래밍 및 동기화 

a.  CPU 구조    /   동작방식 (명령어 집합)  
b.  메모리 종류 및 계층구조    /   메모리 관리 

Central Processing Unit, CPU
컴퓨터에서 구성 단위 중 기억, 해석, 연산, 제어라는 4대 기능을 종합하는 장치 

1. ALU
2. Control unit 컨트롤유닛
3. Resister 레지스터
4. BUS interface 버스인터페이스 


**중앙처리장치(ALU)
1. CPU 산술 논리 연산 장치 (ALU, Arithmetic Logic Unit)
  ㅇ CPU에서 실제로 연산 등을 수행하는 장치(유닛)를 말함
     - 주로, 산술 연산(가감승제), 논리 연산(OR,AND,NOT)
     - 또한, 보수 연산, 시프트 연산 등

3. 프로세서의 내부 구조 
  1). 산술 논리 장치(Arithmetic Logical Unit) ALU 
    - 프로세스 내에서 계산을 담당하는 장치 
    - 지원하는 연산
      (1). 정수 사칙 연산   : + , - , * , /
      (2). 비트 논리 연산   : AND(&), OR(|), XOR(^), 1의 보수(~)
      (3). 비트 시프트 연산 : 왼쪽이동 <<, 오른족 이동 >> 

2. 클록, 1사이클이 가지는 의미
  - 1사이클에 한개의 연산을 수행한다.
  - 2GHz의 프로세스는 1초에 20억 번의 클록 신호를 발생시킨다.


**플린 분류
명령어(Instruction)와 데이터 입력(Data stream)의 개수에 따라 구분한다.

-SIMD
Single instruction stream, multiple data streams.
한 번에 데이터 여러 개를 명령어 하나로 처리하는 기법.
 MMX, SSE, SSE2, SSE3 

-MISD
Multiple instruction streams, single data stream.
한 번에 데이터 한 개를 여러 명령어로 처리하는 기법. 

**파이프라인
파이프라인(pipeline) 이란?
명령어 처리를 여러 단계로 
단계별로 동시에  수행 하여 병렬화를 시키는 것을 말한다.

CPU의 명령어 파이프라인에 대한 전통적인 설명은 4단 파이프라인 구조
1단계: fetch(명령어를 메모리에서 인출)
2단계: decode(명령어 해석)
3단계: execute(명령어 실행)
4단계: writeback(라이트백)

=================================

메모리 종류 
1. EEPROM
SRAM처럼 사용할 수 있는 불휘발성 메모리(NVRAM)이다.
 Read, Write 시간이 SRAM에 비하여 다소 느려 동
실시간 저장 메모리나 스택 메모리가 아닌 
저장용 메모리로 적합하다. 

임베디드 시스템용 마이크로컨트롤러
데이터 저장용으로 소용량(몇백~몇 킬로 바이트 정도) 

2. Flash Memory
 Flash memory는 EEPROM보다 Memory Cell 구조가 간단하여 
대용량의 메모리 소자를 만드는데 적합하며, 
 내부 구조에 따라서 NOR형 Flash와 NAND형 Flash memory로 나뉜다. 

=================================

 //비트연산자 NOT ~
 //비트연산자 AND &
//비트연산자 or |
//비트연산자 xor ^

문자열 연산자 

\"     
\n

================================

// 자바 println() vs printf() 

println()은 변수의 값을 그대로 출력
값을 변환하지 않고는 다른 형식으로 출력할 수 없다

 printf()는 지시자를 통해 
변수의 값을 여러 가지 형식으로 변환하여 출력할 수 있다.

예시) 
%f 소수점 출력 ex - "%.2f"
%n 줄바꿈 기능
%c 문자열 출력


// String  받기  next()   vs nextLine() 

     Scanner sc = new Scanner(System.in);
     String str = sc.next();
     String str2 = sc.nextLine();


// (문자열 (String)  -> Char 타입 리턴)  : CharAt ( ) 

     Scanner sc = new Scanner(System.in);
     char chr = sc.next().charAt(0);


//  Char 타입 -> int 타입 리턴 ) : Character.getNumericValue( )


Character.getNumericValue(str.charAt(i))

char chr = sc.next().charAt(0);

sum = sum + Character.getNumericValue(str.charAt(i)) ;


// String 으로 받아서 문자열 세기 indexOf() :  

System.out.print(str.indexOf(a)+" ");
없으면 -1 값 리턴 


//  String 받아서 char 로 쪼개기  toCharArray() 메서드

     Char 형 배열  = String 객체. toCharArray() 메서드
     String str = "helloworld";    // 문자열 선언
     char[] arr = str.toCharArray();


// String 클래스 format() 메서드 

        String str = String.format("%.6f", a);


// Integer 클래스 toBinaryString, toOctalString, toHexString (진수 바꾸기)

        String hexnum = Integer.toHexString(num);


// Integer.parseInt (문자열 입력 (String)을 =  원하는 Int형 진수 변형)

        int num = Integer.parseInt(octalstr, 8);


//  StringTokenizer  객체 생성  (문자열을 지정된 하나의 객체로 나눔)
        StringTokenizer st = new StringTokenizer(a,".");


====================================

개발 PJT 참여 이력  

IoT device 개발 
1.  (LGU+)  압력센서 적용 자세 교정의자 양산 PJT 
HW 설계 및 Home IoT UI 연동 Test Case 동작 확인
 
2.  (LGU+) 생체신호 측정 매트 개발 PJT

2.  (LGD)  압력센서 이용한 Roll laminator 측정 센서 개발
HW 설계  

4.  (LGE H&A) 로봇 청소기 압력센서 적용 개발 PJT 
HW 설계 

5.  (LGE H&A) 안마의자 계측용 센서 개발 PJT 
HW 설계 및 UI 시나리오 

6. (LGE) CNT + PDMS 분산을 이용한 
압저항 소자 개발
> 소재 분산 

7.(LGE) Graphene 소재를 이용한 스피커 진동판 개발 
> Graphene 분산 

-------------------------------------------------------

- Touch IC 기반 다양한 Application 적용
- 개발 스펙 정의  -> 제조사 IC 별 성능 비교 테스트
(With EVK / Test UI) -> Demo 샘플 제작 -> 시연
-> 사업부 or 계열사 과제 진행 -> Proto Type 구현 
-> 양산 or 선행과제 

1. H.W 설계를 기구와 협의하여 추가 제작 
2. S/W 통신 규격 , 속도 , 패킷 전송 방식 협의 후 통일
3. 동작 Test Case 협의 후 H/W & S/W 테스트 진행 


====================================
